#!/usr/bin/env bash

# Arch Linux Security Hardening Script
# Author: AI Assistant
# Description: Comprehensive security hardening for Arch Linux
# Version: 2.1
# Usage: ./arch-hardening

# Check if running with sudo
if [ "$(id -u)" -ne 0 ]; then
    echo "This script requires sudo privileges. Re-running with sudo..."
    # Using sudo with absolute path to ensure it works properly
    sudo "$(readlink -f "$0")" "$@"
    exit $?
fi

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging
LOG_FILE="/var/log/arch-hardening.log"
# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

# Check if running as root
# This check is redundant now with the automatic sudo check at the beginning
# but kept for additional safety
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED}This script must be run as root (use sudo)${NC}"
  exit 1
fi

# Get the actual user (not root when using sudo)
ACTUAL_USER=${SUDO_USER:-$(logname 2>/dev/null || echo "$USER")}
if [[ -z "$ACTUAL_USER" || "$ACTUAL_USER" == "root" ]]; then
  echo -e "${RED}Cannot determine actual user. Please run with sudo from a regular user account.${NC}"
  exit 1
fi
USER_HOME=$(getent passwd "$ACTUAL_USER" | cut -d: -f6)
if [[ -z "$USER_HOME" ]]; then
  echo -e "${RED}Cannot determine user home directory for $ACTUAL_USER${NC}"
  exit 1
fi

print_banner() {
  echo -e "${BLUE}"
  echo "=================================="
  echo "   Arch Linux Hardening Script   "
  echo "=================================="
  echo -e "${NC}"
}

log_action() {
  echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

log_warning() {
  echo -e "${YELLOW}[WARNING] $1${NC}"
}

log_error() {
  echo -e "${RED}[ERROR] $1${NC}"
}

# Function to safely install packages
install_packages() {
  local packages=("$@")
  log_action "Installing packages: ${packages[*]}"

  # Check if paru is available, use pacman if not
  if command -v paru >/dev/null; then
    # Update package database first with error handling
    if ! paru -Syu --noconfirm --needed; then
      log_warning "paru update failed, trying pacman instead"
      if ! pacman -Syu --noconfirm; then
        log_error "Failed to update package database"
        return 1
      fi
    fi

    for package in "${packages[@]}"; do
      if ! pacman -Qi "$package" >/dev/null 2>&1; then
        if ! paru -S --noconfirm --needed "$package"; then
          log_warning "Failed to install $package with paru, trying pacman"
          if ! pacman -S --noconfirm --needed "$package"; then
            log_warning "Failed to install $package"
            continue
          fi
        fi
        log_action "Successfully installed $package"
      else
        log_action "$package is already installed"
      fi
    done
  else
    # If paru is not available, use pacman directly
    log_warning "paru not found, using pacman instead"

    # Update package database first with error handling
    if ! pacman -Syu --noconfirm; then
      log_error "Failed to update package database"
      return 1
    fi

    for package in "${packages[@]}"; do
      if ! pacman -Qi "$package" >/dev/null 2>&1; then
        if ! pacman -S --noconfirm --needed "$package"; then
          log_warning "Failed to install $package"
          continue
        fi
        log_action "Successfully installed $package"
      else
        log_action "$package is already installed"
      fi
    done
  fi
}

# System Updates
update_system() {
  log_action "Updating system packages..."

  # Check if paru is installed, fallback to pacman if not available
  if command -v paru >/dev/null; then
    paru -Syu --noconfirm || {
      log_warning "paru update failed, trying pacman instead"
      pacman -Syu --noconfirm
    }
  else
    log_warning "paru not found, using pacman instead"
    pacman -Syu --noconfirm
  fi

  # Install security updates checker
  if ! command -v arch-audit >/dev/null; then
    install_packages arch-audit
  fi

  # Only run audit if arch-audit was successfully installed
  if command -v arch-audit >/dev/null; then
    log_action "Running vulnerability audit..."
    arch-audit || log_warning "Some packages have known vulnerabilities"
  else
    log_warning "arch-audit not available, skipping vulnerability check"
  fi
}

# Configure Firewall
setup_firewall() {
  log_action "Setting up UFW firewall..."
  install_packages ufw

  # Reset UFW to default
  ufw --force reset

  # Default policies
  ufw default deny incoming
  ufw default allow outgoing

  # Allow SSH (adjust port if needed)
  ufw allow 22/tcp

  # Allow common services (uncomment if needed)
  # ufw allow 80/tcp   # HTTP
  # ufw allow 443/tcp  # HTTPS

  # Enable firewall
  ufw --force enable

  # Enable UFW service
  systemctl enable ufw
  systemctl start ufw

  log_action "UFW firewall configured and enabled"
}

# Secure SSH Configuration
secure_ssh() {
  log_action "Securing SSH configuration..."

  # Check if SSH is installed and service exists
  if ! systemctl list-unit-files | grep -q "sshd.service"; then
    log_warning "SSH service not found, installing openssh"
    install_packages openssh
  fi

  if [[ -f /etc/ssh/sshd_config ]]; then
    # Ensure SSH directory exists
    mkdir -p /etc/ssh
    # Backup original config with timestamp
    cp /etc/ssh/sshd_config "/etc/ssh/sshd_config.backup.$(date +%Y%m%d-%H%M%S)"

    # Apply secure SSH settings
    cat >/etc/ssh/sshd_config <<'EOF'
# Secure SSH Configuration
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Authentication
PermitRootLogin no
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# Security settings
X11Forwarding no
PrintMotd no
TCPKeepAlive no
Compression no
ClientAliveInterval 300
ClientAliveCountMax 2
MaxAuthTries 3
MaxSessions 2
LoginGraceTime 30

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# Subsystem
Subsystem sftp /usr/lib/ssh/sftp-server -l INFO

# Allow only specific users (uncomment and modify as needed)
# AllowUsers yourusername

AcceptEnv LANG LC_*
EOF

    # Test SSH configuration before restarting
    if sshd -t; then
      systemctl restart sshd
      log_action "SSH configuration secured and service restarted"
    else
      log_error "SSH configuration test failed, restoring backup"
      cp "/etc/ssh/sshd_config.backup.$(date +%Y%m%d)"* /etc/ssh/sshd_config 2>/dev/null || true
      return 1
    fi
  else
    log_warning "SSH not installed or configuration file not found"
  fi
}

# Install and configure Fail2Ban
setup_fail2ban() {
  log_action "Setting up Fail2Ban..."
  install_packages fail2ban

  # Ensure fail2ban directory exists
  mkdir -p /etc/fail2ban
  # Create jail configuration
  cat >/etc/fail2ban/jail.local <<'EOF'
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
backend = systemd
usedns = warn
destemail = root@localhost
sender = root@localhost
mta = sendmail
protocol = tcp
chain = INPUT
port = 0:65535
fail2ban_agent = Fail2Ban/%(fail2ban_version)s

[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s
backend = %(sshd_backend)s
maxretry = 3
bantime = 3600

[nginx-http-auth]
enabled = false

[nginx-limit-req]
enabled = false
EOF

  systemctl enable fail2ban
  systemctl start fail2ban
  log_action "Fail2Ban configured and started"
}

# System Auditing with AIDE
setup_aide() {
  log_action "Setting up AIDE (File Integrity Monitor)..."
  install_packages aide

  # Initialize AIDE database with error handling
  log_action "Initializing AIDE database (this may take a while)..."
  if aide --init; then
    if [[ -f /var/lib/aide/aide.db.new ]]; then
      sudo mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
      log_action "AIDE database initialized successfully"
    else
      log_error "AIDE database file not created"
      return 1
    fi
  else
    log_error "AIDE initialization failed"
    return 1
  fi

  # Ensure cron.daily directory exists
  mkdir -p /etc/cron.daily
  # Create daily check script with better error handling
  cat >/etc/cron.daily/aide-check <<'EOF'
#!/bin/bash
# Daily AIDE integrity check
LOG_FILE="/var/log/aide-check.log"
echo "$(date): Starting AIDE check" >> "$LOG_FILE"
if /usr/bin/aide --check >> "$LOG_FILE" 2>&1; then
  echo "$(date): AIDE check completed successfully" >> "$LOG_FILE"
else
  echo "$(date): AIDE check found issues or failed" >> "$LOG_FILE"
  # Only mail if mail system is available
  if command -v mail >/dev/null 2>&1; then
    tail -50 "$LOG_FILE" | /usr/bin/mail -s "AIDE Integrity Check $(hostname)" root
  fi
fi
EOF
  chmod +x /etc/cron.daily/aide-check

  log_action "AIDE configured with daily checks"
}

# Configure Audit Daemon
setup_auditd() {
  log_action "Setting up system auditing..."
  install_packages audit

  # Ensure audit rules directory exists
  mkdir -p /etc/audit/rules.d
  # Backup original rules
  if [[ -f /etc/audit/rules.d/audit.rules ]]; then
    cp /etc/audit/rules.d/audit.rules /etc/audit/rules.d/audit.rules.backup
  fi

  # Create comprehensive audit rules
  cat >/etc/audit/rules.d/hardening.rules <<'EOF'
# Audit rules for security hardening

# Delete all rules
-D

# Buffer size
-b 8192

# Failure mode (0=silent, 1=printk, 2=panic)
-f 1

# Monitor changes to audit configuration
-w /etc/audit/ -p wa -k audit_config
-w /etc/libaudit.conf -p wa -k audit_config

# Monitor authentication events
-w /etc/passwd -p wa -k identity
-w /etc/group -p wa -k identity
-w /etc/gshadow -p wa -k identity
-w /etc/shadow -p wa -k identity
-w /etc/security/opasswd -p wa -k identity

# Monitor login/logout events
-w /var/log/faillog -p wa -k logins
-w /var/log/lastlog -p wa -k logins
-w /var/log/tallylog -p wa -k logins

# Monitor network configuration
-w /etc/hosts -p wa -k network_config
-w /etc/hostname -p wa -k network_config
-w /etc/resolv.conf -p wa -k network_config

# Monitor system startup scripts
-w /etc/systemd/ -p wa -k systemd_config

# Monitor sudoers
-w /etc/sudoers -p wa -k privilege_escalation
-w /etc/sudoers.d/ -p wa -k privilege_escalation

# Monitor kernel module loading
-w /sbin/insmod -p x -k module_loading
-w /sbin/rmmod -p x -k module_loading
-w /sbin/modprobe -p x -k module_loading

# Monitor file permission changes
-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod

# Monitor file access
-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access

# Lock configuration
-e 2
EOF
  # Enable and start auditd with error handling
  if systemctl enable auditd; then
    if systemctl start auditd; then
      log_action "System auditing configured and started"
    else
      log_warning "Failed to start auditd service"
    fi
  else
    log_warning "Failed to enable auditd service"
  fi
}

# Install security tools
install_security_tools() {
  log_action "Installing security tools..."

  local security_tools=(
    "lynis"         # Security auditing
    "rkhunter"      # Rootkit hunter
    "chkrootkit"    # Rootkit checker
    "clamav"        # Antivirus
    "bleachbit"     # Secure file deletion
    "firejail"      # Application sandboxing
    "apparmor"      # Mandatory access control
    "checksec"      # Binary security checker
    "nmap"          # Network scanner
    "wireshark-cli" # Network analysis
    "tcpdump"       # Packet analyzer
    "logwatch"      # Log analysis
    "tripwire"      # File integrity
    "john"          # Password testing
    "hashcat"       # Password recovery
    "tor"           # Privacy network
    "privoxy"       # Web proxy
    "macchanger"    # MAC address changer
  )

  install_packages "${security_tools[@]}"
}

# Configure AppArmor
setup_apparmor() {
  log_action "Setting up AppArmor..."

  if command -v aa-status >/dev/null; then
    if systemctl enable apparmor && systemctl start apparmor; then
      # Load default profiles safely
      if ls /etc/apparmor.d/* >/dev/null 2>&1; then
        aa-enforce /etc/apparmor.d/* 2>/dev/null || log_warning "Some AppArmor profiles failed to load"
        log_action "AppArmor configured and profiles loaded"
      else
        log_warning "No AppArmor profiles found"
      fi
    else
      log_warning "Failed to enable/start AppArmor service"
    fi
  else
    log_warning "AppArmor not available"
  fi
}

# Configure ClamAV
setup_clamav() {
  log_action "Configuring ClamAV antivirus..."

  if command -v freshclam >/dev/null; then
    # Update virus definitions with timeout
    log_action "Updating ClamAV virus definitions..."
    timeout 300 freshclam || log_warning "ClamAV update timed out or failed"

    # Enable and start services with error handling
    if systemctl enable clamav-freshclam && systemctl start clamav-freshclam; then
      log_action "ClamAV freshclam service started"
    else
      log_warning "Failed to start ClamAV freshclam service"
    fi

    if systemctl enable clamav-daemon && systemctl start clamav-daemon; then
      log_action "ClamAV daemon service started"
    else
      log_warning "Failed to start ClamAV daemon service"
    fi

    # Create daily scan script with better logging
    mkdir -p /var/log/clamav
    # Ensure cron.daily directory exists
    mkdir -p /etc/cron.daily
    cat >/etc/cron.daily/clamav-scan <<'EOF'
#!/bin/bash
# Daily ClamAV scan
LOG_DIR="/var/log/clamav"
DATE=$(date +%Y%m%d)
LOG_FILE="$LOG_DIR/daily-scan-$DATE.log"

# Ensure log directory exists and is writable
mkdir -p "$LOG_DIR"

# Run scan with timeout to prevent hanging
echo "$(date): Starting ClamAV scan" > "$LOG_FILE"
timeout 3600 /usr/bin/clamscan -r /home --log="$LOG_FILE" --quiet
EXIT_CODE=$?

if [ $EXIT_CODE -eq 1 ]; then
  echo "$(date): Virus found!" >> "$LOG_FILE"
  # Send alert if mail is available
  if command -v mail >/dev/null 2>&1; then
    mail -s "VIRUS ALERT: ClamAV found malware on $(hostname)" root < "$LOG_FILE"
  fi
elif [ $EXIT_CODE -eq 124 ]; then
  echo "$(date): Scan timed out" >> "$LOG_FILE"
else
  echo "$(date): Scan completed successfully" >> "$LOG_FILE"
fi

# Keep only last 7 days of logs
find "$LOG_DIR" -name "daily-scan-*.log" -mtime +7 -delete
EOF

chmod +x /etc/cron.daily/clamav-scan

log_action "ClamAV configured with daily scans"
else
  log_warning "ClamAV not available"
  fi
}

# Kernel hardening
harden_kernel() {
  log_action "Applying kernel hardening parameters..."

  # Ensure sysctl.d directory exists
  mkdir -p /etc/sysctl.d
  cat >/etc/sysctl.d/99-hardening.conf <<'EOF'
# Kernel hardening configuration

# Network security
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Memory protection
kernel.dmesg_restrict = 1
kernel.kptr_restrict = 2
kernel.yama.ptrace_scope = 1
kernel.unprivileged_bpf_disabled = 1
net.core.bpf_jit_harden = 2

# File system security
fs.protected_hardlinks = 1
fs.protected_symlinks = 1
fs.protected_fifos = 2
fs.protected_regular = 2
fs.suid_dumpable = 0

# Process restrictions
kernel.core_uses_pid = 1
kernel.ctrl-alt-del = 0

EOF

# Apply settings immediately
sysctl -p /etc/sysctl.d/99-hardening.conf
log_action "Kernel hardening parameters applied"
}

# Secure mount options
secure_mounts() {
  log_action "Securing mount options..."

  # Ensure fstab exists and backup
  touch /etc/fstab
  cp /etc/fstab /etc/fstab.backup

  # Add secure mount options for temporary directories (check if already mounted)
  if ! mountpoint -q /tmp && ! grep -q "/tmp.*noexec" /etc/fstab; then
    echo "tmpfs /tmp tmpfs defaults,noexec,nosuid,nodev,size=1G 0 0" >>/etc/fstab
    log_action "Added secure /tmp mount to fstab"
  elif mountpoint -q /tmp; then
    log_warning "/tmp is already mounted, manual review recommended"
  fi

  if ! mountpoint -q /var/tmp && ! grep -q "/var/tmp.*noexec" /etc/fstab; then
    echo "tmpfs /var/tmp tmpfs defaults,noexec,nosuid,nodev,size=1G 0 0" >>/etc/fstab
    log_action "Added secure /var/tmp mount to fstab"
  elif mountpoint -q /var/tmp; then
    log_warning "/var/tmp is already mounted, manual review recommended"
  fi

  log_action "Secure mount options configured (requires reboot)"
}

# Password policies
setup_password_policy() {
  log_action "Setting up password policies..."
  install_packages libpwquality

  # Ensure security directory exists
  mkdir -p /etc/security
  # Configure password quality
  cat >/etc/security/pwquality.conf <<'EOF'
# Password quality configuration
minlen = 12
minclass = 3
maxrepeat = 2
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1
difok = 5
gecoscheck = 1
badwords = password admin user root
EOF

# Configure PAM for password policies
# Ensure pam.d directory exists
mkdir -p /etc/pam.d
if [[ -f /etc/pam.d/passwd ]]; then
  sed -i 's/password\s*required\s*pam_unix.so.*/password required pam_unix.so sha512 shadow nullok use_authtok minlen=12/' /etc/pam.d/passwd
else
  # Create basic passwd pam configuration if it doesn't exist
  cat >/etc/pam.d/passwd <<'EOF'
password required pam_pwquality.so retry=3
password required pam_unix.so sha512 shadow nullok use_authtok minlen=12
EOF
fi

log_action "Password policies configured"
}

# User account security
secure_user_accounts() {
  log_action "Securing user accounts..."

  # Lock unused system accounts
  local system_users=("bin" "daemon" "adm" "lp" "sync" "shutdown" "halt" "mail" "operator" "games" "ftp")

  for user in "${system_users[@]}"; do
    if id "$user" >/dev/null 2>&1; then
      usermod -L "$user" 2>/dev/null || true
      usermod -s /sbin/nologin "$user" 2>/dev/null || true
    fi
  done

  # Set password aging for regular users
  chage -M 90 -m 7 -W 7 "$ACTUAL_USER" 2>/dev/null || log_warning "Could not set password aging for $ACTUAL_USER"

  log_action "User accounts secured"
}

# Privacy enhancements
setup_privacy() {
  log_action "Setting up privacy enhancements..."

  # Install privacy tools
  install_packages tor privoxy

  # Configure Tor (basic setup)
  systemctl enable tor

  # Configure DNS over HTTPS
  if systemctl is-active --quiet systemd-resolved; then
    # Ensure systemd resolved config directory exists
    mkdir -p /etc/systemd/resolved.conf.d
    cat >/etc/systemd/resolved.conf.d/dns-over-tls.conf <<'EOF'
[Resolve]
DNS=1.1.1.1 8.8.8.8
FallbackDNS=1.0.0.1 8.8.4.4
Domains=~.
DNSSEC=yes
DNSOverTLS=yes
EOF
systemctl restart systemd-resolved
  fi

  # Clear system logs older than 30 days
  journalctl --vacuum-time=30d

  log_action "Privacy enhancements configured"
}

# Create security maintenance script
create_maintenance_script() {
  log_action "Creating security maintenance script..."

  # Ensure usr/local/bin directory exists
  mkdir -p /usr/local/bin
  cat >/usr/local/bin/security-maintenance <<'EOF'
#!/bin/bash
# Security maintenance script
# Run weekly for system security maintenance

echo "=== Security Maintenance $(date) ==="

# Update system
pacman -Syu --noconfirm

# Update virus definitions
freshclam

# Run security audit
echo "Running Lynis security audit..."
lynis audit system --quick

# Check for rootkits
echo "Scanning for rootkits..."
rkhunter --check --skip-keypress

# Update AIDE database
echo "Updating AIDE database..."
aide --update
mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

# Clean package cache
paccache -r

# Clean temporary files
bleachbit --clean system.cache system.localizations system.trash

echo "=== Security Maintenance Complete ==="
EOF

chmod +x /usr/local/bin/security-maintenance

# Add to weekly cron (check if already exists)
# Ensure crontab exists
touch /etc/crontab
if ! grep -q "security-maintenance" /etc/crontab 2>/dev/null; then
  echo "0 2 * * 0 root /usr/local/bin/security-maintenance" >>/etc/crontab
  log_action "Added weekly security maintenance to crontab"
else
  log_action "Security maintenance cron job already exists"
fi

log_action "Security maintenance script created"
}

# Disable unnecessary services
disable_services() {
  log_action "Disabling unnecessary services..."

  local services_to_disable=(
    "bluetooth"
    "cups"
    "avahi-daemon"
    "ModemManager"
  )

  for service in "${services_to_disable[@]}"; do
    if systemctl list-unit-files | grep -q "^$service.service"; then
      if systemctl is-enabled "$service" >/dev/null 2>&1; then
        systemctl disable "$service"
        systemctl stop "$service" 2>/dev/null || true
        log_action "Disabled $service"
      else
        log_action "$service is already disabled"
      fi
    else
      log_action "$service is not installed"
    fi
  done
}

# Final system scan
run_final_scan() {
  log_action "Running final security scan..."

  if command -v lynis >/dev/null; then
    lynis audit system --quick --no-colors | tee /var/log/lynis-hardening-report.log
  fi

  log_action "Final security scan completed. Report saved to /var/log/lynis-hardening-report.log"
}

# Backup critical configurations
backup_configs() {
  log_action "Creating configuration backups..."

  # Count existing backups
  local backup_count
  backup_count=$(find /root -maxdepth 1 -name "hardening-backup-*" -type d | wc -l)

  if [ "$backup_count" -gt 0 ]; then
    log_action "Found $backup_count previous backup(s). Cleaning up..."

    # List all backups before deletion for logging
    find /root -maxdepth 1 -name "hardening-backup-*" -type d | while read -r backup; do
      log_action "Removing old backup: $backup"
    done

    # Delete previous backups made by this script
    find /root -maxdepth 1 -name "hardening-backup-*" -type d -exec rm -rf {} \; 2>/dev/null || true
    log_action "Old backups removed successfully."
  else
    log_action "No previous backups found."
  fi

  local backup_dir
  backup_dir="/root/hardening-backup-$(date +%Y%m%d)"
  mkdir -p "$backup_dir"

  # Backup important configurations (only if they exist)
  [[ -d /etc/ssh ]] && cp -r /etc/ssh "$backup_dir/" || mkdir -p "$backup_dir/ssh"
  [[ -d /etc/audit ]] && cp -r /etc/audit "$backup_dir/" || mkdir -p "$backup_dir/audit"
  [[ -f /etc/fstab ]] && cp /etc/fstab "$backup_dir/" || touch "$backup_dir/fstab"
  [[ -d /etc/ufw ]] && cp -r /etc/ufw "$backup_dir/" 2>/dev/null || true
  [[ -d /etc/fail2ban ]] && cp -r /etc/fail2ban "$backup_dir/" 2>/dev/null || true

  log_action "Configuration backups saved to $backup_dir"
}

# Main execution
main() {
  print_banner

  log_action "Starting Arch Linux hardening process..."
  log_action "Backup will be created before making changes"

  # Create backups first
  backup_configs

  # Core hardening steps
  update_system
  harden_kernel
  secure_mounts
  setup_firewall
  secure_ssh
  setup_fail2ban
  setup_auditd
  setup_password_policy
  secure_user_accounts

  # Install and configure security tools
  install_security_tools
  setup_apparmor
  setup_clamav
  setup_aide

  # Privacy and maintenance
  setup_privacy
  create_maintenance_script
  disable_services

  # Final steps
  run_final_scan

  echo -e "${GREEN}"
  echo "============================================"
  echo "   Arch Linux Hardening Complete!          "
  echo "============================================"
  echo -e "${NC}"
  echo "Important notes:"
  echo "1. Reboot your system to apply all changes"
  echo "2. SSH configuration has been secured - ensure you have SSH keys set up"
  echo "3. Review firewall rules and adjust as needed: sudo ufw status"
  echo "4. Check the Lynis report for additional recommendations"
  echo "5. Run weekly maintenance: sudo /usr/local/bin/security-maintenance"
  echo "6. Fresh backup saved in /root/hardening-backup-$(date +%Y%m%d) (previous backups were cleaned up)"
  echo ""
  echo "Log file: $LOG_FILE"
}

# Run main function
main "$@"
