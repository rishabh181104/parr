#!/usr/bin/env bash

# Security Validation Script for Arch Linux
# Description: Validates and checks security hardening implementations
# Version: 1.0
# Usage: ./security-validation (will automatically use sudo if needed)

# Add sudo handling at the beginning
if [ "$(id -u)" -ne 0 ]; then
    echo "This script requires sudo privileges. Re-running with sudo..."
    sudo "$0" "$@"
    exit $?
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Statistics counters
PASSED=0
FAILED=0
WARNINGS=0

print_banner() {
  echo -e "${BLUE}"
  echo "========================================"
  echo "   Security Validation & Check Script  "
  echo "========================================"
  echo -e "${NC}"
}

check_pass() {
  echo -e "${GREEN}[PASS] $1${NC}"
  ((PASSED++))
}

check_fail() {
  echo -e "${RED}[FAIL] $1${NC}"
  ((FAILED++))
}

check_warn() {
  echo -e "${YELLOW}[WARN] $1${NC}"
  ((WARNINGS++))
}

print_section() {
  echo -e "\n${BLUE}=== $1 ===${NC}"
}

# Firewall validation
validate_firewall() {
  print_section "Firewall Configuration"

  if systemctl is-active --quiet ufw; then
    check_pass "UFW firewall service is active"

    if ufw status | grep -q "Status: active"; then
      check_pass "UFW is enabled"
    else
      check_fail "UFW is installed but not enabled"
    fi

    if ufw status | grep -q "22/tcp.*ALLOW"; then
      check_pass "SSH port (22) is allowed through firewall"
    else
      check_warn "SSH port may not be accessible through firewall"
    fi

    if ufw status | grep -q "Anywhere on lo.*ALLOW"; then
      check_pass "Loopback interface is allowed"
    else
      check_warn "Loopback interface rules may need review"
    fi
  else
    check_fail "UFW firewall service is not active"
  fi
}

# SSH security validation
validate_ssh() {
  print_section "SSH Security Configuration"

  if [[ -f /etc/ssh/sshd_config ]]; then
    if grep -q "^PermitRootLogin no" /etc/ssh/sshd_config; then
      check_pass "Root login via SSH is disabled"
    else
      check_fail "Root login via SSH is not properly disabled"
    fi

    if grep -q "^PasswordAuthentication no" /etc/ssh/sshd_config; then
      check_pass "Password authentication is disabled"
    else
      check_fail "Password authentication is not disabled"
    fi

    if grep -q "^PubkeyAuthentication yes" /etc/ssh/sshd_config; then
      check_pass "Public key authentication is enabled"
    else
      check_fail "Public key authentication is not enabled"
    fi

    if grep -q "^X11Forwarding no" /etc/ssh/sshd_config; then
      check_pass "X11 forwarding is disabled"
    else
      check_warn "X11 forwarding may be enabled"
    fi

    if grep -q "^MaxAuthTries [1-3]" /etc/ssh/sshd_config; then
      check_pass "SSH authentication attempts are limited"
    else
      check_warn "SSH authentication attempts limit may not be set"
    fi
  else
    check_warn "SSH configuration file not found"
  fi
}

# Fail2ban validation
validate_fail2ban() {
  print_section "Fail2ban Intrusion Prevention"

  if systemctl is-active --quiet fail2ban; then
    check_pass "Fail2ban service is active"

    if [[ -f /etc/fail2ban/jail.local ]]; then
      check_pass "Fail2ban local configuration exists"

      if grep -q "\[sshd\]" /etc/fail2ban/jail.local; then
        check_pass "SSH jail is configured in Fail2ban"
      else
        check_warn "SSH jail may not be configured"
      fi
    else
      check_warn "Fail2ban local configuration not found"
    fi
  else
    check_fail "Fail2ban service is not active"
  fi
}

# Audit system validation
validate_audit() {
  print_section "System Auditing"

  if systemctl is-active --quiet auditd; then
    check_pass "Auditd service is active"

    if [[ -f /etc/audit/rules.d/hardening.rules ]]; then
      check_pass "Custom audit rules file exists"

      if grep -q "passwd.*-k identity" /etc/audit/rules.d/hardening.rules; then
        check_pass "User account monitoring rules are configured"
      else
        check_warn "User account monitoring may not be configured"
      fi
    else
      check_warn "Custom hardening audit rules not found"
    fi

    if auditctl -l | grep -q "watch"; then
      check_pass "Audit rules are loaded and active"
    else
      check_warn "No audit rules appear to be active"
    fi
  else
    check_fail "Auditd service is not active"
  fi
}

# File integrity monitoring validation
validate_file_integrity() {
  print_section "File Integrity Monitoring"

  if command -v aide >/dev/null; then
    check_pass "AIDE is installed"

    if [[ -f /var/lib/aide/aide.db ]]; then
      check_pass "AIDE database exists"
    else
      check_fail "AIDE database not found - run 'aide --init'"
    fi

    if [[ -f /etc/cron.daily/aide-check ]]; then
      check_pass "AIDE daily check script exists"
    else
      check_warn "AIDE daily check script not found"
    fi
  else
    check_fail "AIDE is not installed"
  fi
}

# AppArmor validation
validate_apparmor() {
  print_section "AppArmor Mandatory Access Control"

  if command -v aa-status >/dev/null; then
    if systemctl is-active --quiet apparmor; then
      check_pass "AppArmor service is active"

      PROFILES_LOADED=$(aa-status --enabled 2>/dev/null | wc -l || echo "0")
      if [[ $PROFILES_LOADED -gt 0 ]]; then
        check_pass "AppArmor profiles are loaded ($PROFILES_LOADED profiles)"
      else
        check_warn "No AppArmor profiles are loaded"
      fi
    else
      check_fail "AppArmor service is not active"
    fi
  else
    check_warn "AppArmor is not available"
  fi
}

# Antivirus validation
validate_antivirus() {
  print_section "Antivirus Protection"

  if command -v clamscan >/dev/null; then
    check_pass "ClamAV is installed"

    if systemctl is-active --quiet clamav-freshclam; then
      check_pass "ClamAV update service is active"
    else
      check_warn "ClamAV update service is not active"
    fi

    if systemctl is-active --quiet clamav-daemon; then
      check_pass "ClamAV daemon service is active"
    else
      check_warn "ClamAV daemon service is not active"
    fi

    if [[ -f /etc/cron.daily/clamav-scan ]]; then
      check_pass "ClamAV daily scan script exists"
    else
      check_warn "ClamAV daily scan script not found"
    fi

    # Check virus definition age
    if [[ -f /var/lib/clamav/daily.cvd ]]; then
      CURRENT_TIME=$(date +%s)
      FILE_TIME=$(stat -c %Y /var/lib/clamav/daily.cvd 2>/dev/null || echo "0")
      DAYS_OLD=$(( (CURRENT_TIME - FILE_TIME) / 86400 ))
      if [[ $DAYS_OLD -le 7 ]]; then
        check_pass "Virus definitions are recent (${DAYS_OLD} days old)"
      else
        check_warn "Virus definitions are old (${DAYS_OLD} days old)"
      fi
    fi
  else
    check_fail "ClamAV is not installed"
  fi
}

# Kernel hardening validation
validate_kernel_hardening() {
  print_section "Kernel Security Parameters"

  if [[ -f /etc/sysctl.d/99-hardening.conf ]]; then
    check_pass "Kernel hardening configuration file exists"

    # Check key security parameters
    if sysctl net.ipv4.ip_forward | grep -q "= 0"; then
      check_pass "IP forwarding is disabled"
    else
      check_warn "IP forwarding may be enabled"
    fi

    if sysctl kernel.dmesg_restrict | grep -q "= 1"; then
      check_pass "Kernel log access is restricted"
    else
      check_warn "Kernel log access may not be restricted"
    fi

    if sysctl kernel.kptr_restrict | grep -q "= 2"; then
      check_pass "Kernel pointer access is restricted"
    else
      check_warn "Kernel pointer access may not be fully restricted"
    fi

    if sysctl net.ipv4.tcp_syncookies | grep -q "= 1"; then
      check_pass "TCP SYN cookies are enabled"
    else
      check_warn "TCP SYN cookies may not be enabled"
    fi
  else
    check_fail "Kernel hardening configuration file not found"
  fi
}

# Mount security validation
validate_mount_security() {
  print_section "File System Mount Security"

  if mount | grep -q "/tmp.*noexec"; then
    check_pass "/tmp is mounted with noexec option"
  elif grep -q "/tmp.*noexec" /etc/fstab; then
    check_warn "/tmp noexec configured in fstab but not currently mounted"
  else
    check_warn "/tmp is not configured with noexec option"
  fi

  if mount | grep -q "/var/tmp.*noexec"; then
    check_pass "/var/tmp is mounted with noexec option"
  elif grep -q "/var/tmp.*noexec" /etc/fstab; then
    check_warn "/var/tmp noexec configured in fstab but not currently mounted"
  else
    check_warn "/var/tmp is not configured with noexec option"
  fi
}

# Password policy validation
validate_password_policy() {
  print_section "Password Security Policies"

  if [[ -f /etc/security/pwquality.conf ]]; then
    check_pass "Password quality configuration exists"

    if grep -q "^minlen.*=.*1[2-9]" /etc/security/pwquality.conf; then
      check_pass "Minimum password length is configured (>=12)"
    else
      check_warn "Minimum password length may not be adequately set"
    fi

    if grep -q "^minclass.*=.*[3-4]" /etc/security/pwquality.conf; then
      check_pass "Password complexity requirements are configured"
    else
      check_warn "Password complexity requirements may not be set"
    fi
  else
    check_fail "Password quality configuration not found"
  fi
}

# System services validation
validate_system_services() {
  print_section "System Services Security"

  local unnecessary_services=("bluetooth" "cups" "avahi-daemon" "ModemManager")

  for service in "${unnecessary_services[@]}"; do
    if systemctl is-enabled "$service" >/dev/null 2>&1; then
      check_warn "$service is enabled (consider disabling if not needed)"
    else
      if systemctl list-unit-files | grep -q "^$service.service"; then
        check_pass "$service is disabled"
      else
        check_pass "$service is not installed"
      fi
    fi
  done
}

# User account security validation
validate_user_accounts() {
  print_section "User Account Security"

  # Check for accounts with empty passwords
  if awk -F: '($2 == "") {print}' /etc/shadow | grep -q .; then
    check_fail "Found accounts with empty passwords"
  else
    check_pass "No accounts with empty passwords found"
  fi

  # Check root account status
  if passwd -S root | grep -q "L"; then
    check_pass "Root account is locked"
  else
    check_warn "Root account may not be locked"
  fi

  # Check for unused system accounts
  local system_users=("bin" "daemon" "adm" "lp" "sync" "shutdown" "halt" "mail")
  for user in "${system_users[@]}"; do
    if id "$user" >/dev/null 2>&1; then
      if passwd -S "$user" 2>/dev/null | grep -q "L"; then
        check_pass "System user $user is locked"
      else
        check_warn "System user $user may not be locked"
      fi
    fi
  done
}

# Network security validation
validate_network_security() {
  print_section "Network Security"

  # Check for listening services
  echo "Currently listening services:"
  ss -tulpn | grep LISTEN | while read -r line; do
    echo "  $line"
  done

  # Check DNS configuration
  if systemctl is-active --quiet systemd-resolved; then
    if [[ -f /etc/systemd/resolved.conf.d/dns-over-tls.conf ]]; then
      check_pass "DNS over TLS configuration found"
    else
      check_warn "DNS over TLS may not be configured"
    fi
  fi

  # Check for IPv6 if disabled
  if sysctl net.ipv6.conf.all.disable_ipv6 2>/dev/null | grep -q "= 1"; then
    check_pass "IPv6 is disabled system-wide"
  else
    check_warn "IPv6 is enabled (ensure it's properly secured if needed)"
  fi
}

# Privacy and logging validation
validate_privacy_logging() {
  print_section "Privacy and Logging"

  # Check journal retention
  JOURNAL_SIZE=$(journalctl --disk-usage | grep -o '[0-9.]*[KMGT]B')
  echo "Journal disk usage: $JOURNAL_SIZE"

  if systemctl is-active --quiet tor; then
    check_pass "Tor service is available"
  else
    check_warn "Tor service is not active"
  fi

  # Check for security maintenance script
  if [[ -f /usr/local/bin/security-maintenance ]]; then
    check_pass "Security maintenance script exists"

    if grep -q "security-maintenance" /etc/crontab; then
      check_pass "Security maintenance is scheduled in crontab"
    else
      check_warn "Security maintenance may not be scheduled"
    fi
  else
    check_fail "Security maintenance script not found"
  fi
}

# Security tools validation
validate_security_tools() {
  print_section "Security Tools Installation"

  local tools=("lynis" "rkhunter" "chkrootkit" "nmap" "tcpdump")

  for tool in "${tools[@]}"; do
    if command -v "$tool" >/dev/null; then
      check_pass "$tool is installed"
    else
      check_warn "$tool is not installed"
    fi
  done
}

# User-space security validation (checks user hardening script effectiveness)
validate_user_security() {
  print_section "User-Space Security"

  # Check Firefox hardening
  local firefox_profile=$(find /home/*/snap/firefox/.mozilla/firefox -name "*.default*" -type d 2>/dev/null || find /home/*/.mozilla/firefox -name "*.default*" -type d 2>/dev/null)

  if [[ -n "$firefox_profile" ]]; then
    if [[ -f "$firefox_profile/user.js" ]]; then
      if grep -q "privacy.resistFingerprinting" "$firefox_profile/user.js"; then
        check_pass "Firefox privacy hardening is configured"
      else
        check_warn "Firefox privacy hardening may be incomplete"
      fi
    else
      check_warn "Firefox user.js configuration not found"
    fi
  else
    check_warn "Firefox profile not found or not in standard location"
  fi

  # Check SSH client config
  if [[ -f /home/*/.ssh/config ]]; then
    if grep -q "HashKnownHosts yes" /home/*/.ssh/config 2>/dev/null; then
      check_pass "SSH client is securely configured"
    else
      check_warn "SSH client hardening may be incomplete"
    fi
  else
    check_warn "SSH client configuration not found"
  fi

  # Check for security monitoring scripts
  if [[ -x /home/*/.local/bin/security-check ]]; then
    check_pass "User security monitoring script is installed"
  else
    check_warn "User security monitoring script not found"
  fi

  # Check shell history permissions
  if find /home -name ".bash_history" -perm 0600 -o -name ".zsh_history" -perm 0600 | grep -q .; then
    check_pass "Shell history files have secure permissions"
  else
    check_warn "Shell history files may have insecure permissions"
  fi
}

# Generate summary report
generate_summary() {
  echo -e "\n${BLUE}========================================"
  echo "           VALIDATION SUMMARY"
  echo -e "========================================${NC}"
  echo -e "${GREEN}Passed checks: $PASSED${NC}"
  echo -e "${YELLOW}Warnings: $WARNINGS${NC}"
  echo -e "${RED}Failed checks: $FAILED${NC}"
  echo ""

  if [[ $FAILED -eq 0 ]]; then
    echo -e "${GREEN}✓ Security hardening appears to be properly implemented!${NC}"
  elif [[ $FAILED -le 3 ]]; then
    echo -e "${YELLOW}⚠ Most security measures are in place, but some issues need attention.${NC}"
  else
    echo -e "${RED}✗ Multiple security issues detected. Review and re-run hardening scripts.${NC}"
  fi

  echo ""
  echo "Recommendations:"
  echo "1. Address any failed checks immediately"
  echo "2. Review warnings and implement fixes where applicable"
  echo "3. Run this validation script regularly"
  echo "4. Keep system updated with: pacman -Syu"
  echo "5. Review logs regularly: journalctl -p err..alert"
  echo ""
  echo "Hardening Scripts Available:"
  echo "- System hardening: /home/ste/stecore/.local/bin/arch-hardening (run with sudo)"
  echo "- User hardening: /home/ste/stecore/.local/bin/user-hardening (run as regular user)"
  echo ""
  echo "Report generated on: $(date)"
}

# Main execution
main() {
  print_banner

  echo "Starting comprehensive security validation..."
  echo "This may take a few minutes..."
  echo ""

  validate_firewall
  validate_ssh
  validate_fail2ban
  validate_audit
  validate_file_integrity
  validate_apparmor
  validate_antivirus
  validate_kernel_hardening
  validate_mount_security
  validate_password_policy
  validate_system_services
  validate_user_accounts
  validate_network_security
  validate_privacy_logging
  validate_security_tools
  validate_user_security  # Added specific check for user hardening

  generate_summary
}

# Run main function
main "$@"
